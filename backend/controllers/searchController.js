import { User } from "../models/userModel.js";
import mongoose from "mongoose";

// API l·∫•y danh s√°ch ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫°n bi·∫øt
export const getMayKnowUsers = async (req, res) => {
    try {
        const userId = req.query.userId;

        if (!mongoose.isValidObjectId(userId)) {
            console.log("‚ö†Ô∏è [WARNING] Invalid userId");
            return res
                .status(400)
                .json({ success: false, message: "Invalid userId" });
        }

        const objectId = new mongoose.Types.ObjectId(userId);
        console.log("üì• [INFO] Converted userId:", objectId);

        const user = await User.findById(objectId);
        if (!user) {
            console.log("‚ö†Ô∏è [WARNING] User not found");
            return res
                .status(404)
                .json({ success: false, message: "User not found" });
        }

        // L·∫•y danh s√°ch followings v√† followers c·ªßa ng∆∞·ªùi d√πng
        const followings = (user.followings || []).map(
            (id) => new mongoose.Types.ObjectId(id.toString())
        );
        const followers = (user.followers || []).map(
            (id) => new mongoose.Types.ObjectId(id.toString())
        );

        console.log("üîó [INFO] Direct followings:", followings);
        console.log("üë• [INFO] Direct followers:", followers);

        // T·∫°o danh s√°ch excludeIds
        const excludeIds = [objectId, ...followings, ...followers];
        console.log("üóëÔ∏è [INFO] Exclude IDs (direct connections):", excludeIds);

        // L·∫•y danh s√°ch followings c·ªßa followings (m·ªëi quan h·ªá gi√°n ti·∫øp)
        const indirectFollowings = await User.find({
            _id: { $in: followings },
        }).select("followings name");
        console.log("üîç [INFO] Fetching followings of followings...");

        // Thu th·∫≠p followings c·ªßa followings
        const indirectIds = new Set();
        indirectFollowings.forEach((followingUser) => {
            console.log(
                `üîç [INFO] Processing followings of ${followingUser.name} (${followingUser._id})`
            );
            (followingUser.followings || []).forEach((id) => {
                if (!excludeIds.includes(id.toString())) {
                    indirectIds.add(id.toString());
                    console.log(`‚úÖ [INFO] Added indirect following ID: ${id}`);
                } else {
                    console.log(
                        `üõë [INFO] Skipped direct connection ID: ${id}`
                    );
                }
            });
        });

        // T√¨m ki·∫øm ng∆∞·ªùi d√πng d·ª±a tr√™n m·ªëi quan h·ªá gi√°n ti·∫øp
        let mayKnowUsers = await User.find({
            _id: { $in: Array.from(indirectIds) },
        })
            .select("name username avatar")
            .limit(3)
            .lean();

        // Lo·∫°i b·ªè ng∆∞·ªùi d√πng hi·ªán t·∫°i kh·ªèi danh s√°ch k·∫øt qu·∫£
        mayKnowUsers = mayKnowUsers.filter(
            (user) => !user._id.equals(objectId)
        );
        console.log(
            "‚úÖ [INFO] Filtered May Know Users (excluding current user):",
            mayKnowUsers
        );

        res.json({ success: true, data: mayKnowUsers });
    } catch (error) {
        console.error("‚ùå [ERROR] Error fetching may-know users:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};


// API t√¨m ki·∫øm ng∆∞·ªùi d√πng theo t√™n
export const searchUsers = async (req, res) => {
    try {
        const { query, userId } = req.query;

        if (!mongoose.isValidObjectId(userId)) {
            console.log("‚ö†Ô∏è [WARNING] Invalid userId");
            return res.status(400).json({ success: false, message: "Invalid userId" });
        }

        const objectId = new mongoose.Types.ObjectId(userId);
        console.log("üì• [INFO] Converted userId:", objectId);
        console.log("üîç [INFO] Search query:", query);

        // T√¨m ki·∫øm t·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ t√™n ch·ª©a t·ª´ kh√≥a t√¨m ki·∫øm, ngo·∫°i tr·ª´ ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const results = await User.find({
            _id: { $ne: objectId },
            name: { $regex: query, $options: "i" },
        })
            .select("name username avatar")
            .limit(10)
            .lean();

        console.log("‚úÖ [INFO] Search results:", results);

        res.json({ success: true, data: results });
    } catch (error) {
        console.error("‚ùå [ERROR] Error searching users:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

export const getRandomUsers = async (req, res) => {
    try {
        const userId = req.query.userId;

        if (!mongoose.isValidObjectId(userId)) {
            console.log("‚ö†Ô∏è [WARNING] Invalid userId");
            return res.status(400).json({ success: false, message: "Invalid userId" });
        }

        const objectId = new mongoose.Types.ObjectId(userId);
        console.log("üì• [INFO] Converted userId:", objectId);

        const currentUser = await User.findById(objectId);
        if (!currentUser) {
            console.log("‚ö†Ô∏è [WARNING] User not found");
            return res.status(404).json({ success: false, message: "User not found" });
        }

        // L·∫•y danh s√°ch followings c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const followings = (currentUser.followings || []).map(id => new mongoose.Types.ObjectId(id.toString()));

        // T·∫°o danh s√°ch excludeIds bao g·ªìm ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† followings
        const excludeIds = [objectId, ...followings];

        // L·∫•y ng·∫´u nhi√™n 3 ng∆∞·ªùi d√πng, ngo·∫°i tr·ª´ nh·ªØng ng∆∞·ªùi trong excludeIds
        const randomUsers = await User.aggregate([
            { $match: { _id: { $nin: excludeIds } } },
            { $sample: { size: 3 } },
            { $project: { name: 1, username: 1, avatar: 1 } }
        ]);

        console.log("‚úÖ [INFO] Random Users:", randomUsers);

        res.json({ success: true, data: randomUsers });
    } catch (error) {
        console.error("‚ùå [ERROR] Error fetching random users:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};